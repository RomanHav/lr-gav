import json
import time
from pathlib import Path
from telethon import TelegramClient
from telethon.tl.types import User
from telethon.errors import UsernameNotOccupiedError, ChannelPrivateError, FloodWaitError
import asyncio

# === ‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
api_id = 26514301  # ‚Üê –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π
api_hash = '8b0a81e45f14b5282c4c3eeabe1411b4'  # ‚Üê –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π
session_name = 'telegram_session'
output_dir = Path("telegram_exports")
output_dir.mkdir(exist_ok=True)

# === üì§ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
def get_sender_name(sender: User):
    if sender is None:
        return "Unknown"
    if getattr(sender, "bot", False):
        return f"{sender.username or 'bot'}_bot"
    return sender.username or f"{sender.first_name or ''} {sender.last_name or ''}".strip()

def message_to_dict(message):
    sender = message.sender
    return {
        "user_id": get_sender_name(sender),
        "text": message.message or "",
        "timestamp": message.date.timestamp(),
    }

# === üöÄ –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
async def export_chat(chat_name: str, limit: int = 100):
    async with TelegramClient(session_name, api_id, api_hash) as client:
        print(f"üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–∞—Ç—É: {chat_name}")

        try:
            entity = await client.get_entity(chat_name)
        except UsernameNotOccupiedError:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ —á–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        except ChannelPrivateError:
            print("üîí –ü–æ–º–∏–ª–∫–∞: –¶–µ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª –∞–±–æ –≤–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º.")
            return
        except FloodWaitError as e:
            print(f"‚è≥ Flood wait: –∑–∞—á–µ–∫–∞–π—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥.")
            return
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            return

        messages_data = []
        count = 0

        async for message in client.iter_messages(entity, limit=limit):
            if not message.message or not message.sender:
                continue
            await message.get_sender()  # –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ sender
            messages_data.append(message_to_dict(message))
            count += 1

        if not messages_data:
            print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
            return

        # –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏—Ö –¥–æ –Ω–∞–π–Ω–æ–≤—ñ—à–∏—Ö
        messages_data.reverse()

        filename = output_dir / f"{chat_name.replace(' ', '_')}_{int(time.time())}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump({"messages": messages_data}, f, ensure_ascii=False, indent=2)

        print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É: {filename}")

# === ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import sys

    if len(sys.argv) < 2:
        print("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python telegram_scraper.py chat_username –∞–±–æ 'https://t.me/...'\n")
        sys.exit(1)

    chat_input = sys.argv[1]
    asyncio.run(export_chat(chat_input))
